// <auto-generated />
using System;
using Crude.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Crude.Migrations
{
    [DbContext(typeof(CrudeDB))]
    [Migration("20200417153401_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crude.Models.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("Crude.Models.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 39.600000000000001,
                            Longitude = -8.4000000000000004,
                            Nome = "Tomar"
                        });
                });

            modelBuilder.Entity("Crude.Models.Espacos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CidadeId")
                        .HasColumnType("int");

                    b.Property<double>("Classificacao")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NomeConhecido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeOficial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.ToTable("Espacos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Classificacao = 5.0,
                            Latitude = 39.600000000000001,
                            Longitude = -8.4000000000000004,
                            NomeConhecido = "Aka",
                            NomeOficial = "Café Acadêmico"
                        });
                });

            modelBuilder.Entity("Crude.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Avaliacao")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("Crude.Models.Opcoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Opcao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Opcoes");
                });

            modelBuilder.Entity("Crude.Models.Perguntas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuestionarioId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionarioId");

                    b.ToTable("Perguntas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Texto = "Olá Mundo!!! Quem és tu?"
                        });
                });

            modelBuilder.Entity("Crude.Models.Questionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlunoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionarioFK")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionariosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("QuestionariosId");

                    b.ToTable("Questionarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Quen és tu?",
                            QuestionarioFK = 0
                        });
                });

            modelBuilder.Entity("Crude.Models.Resposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Escolha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PerguntasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerguntasId");

                    b.ToTable("Respostas");
                });

            modelBuilder.Entity("Crude.Models.Tipos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EspacoId")
                        .HasColumnType("int");

                    b.Property<int>("EspacosFK")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EspacoId");

                    b.ToTable("Tipos");
                });

            modelBuilder.Entity("Crude.Models.Espacos", b =>
                {
                    b.HasOne("Crude.Models.Cidade", null)
                        .WithMany("ListaDeEspacos")
                        .HasForeignKey("CidadeId");
                });

            modelBuilder.Entity("Crude.Models.Perguntas", b =>
                {
                    b.HasOne("Crude.Models.Questionario", null)
                        .WithMany("ListaDePerguntas")
                        .HasForeignKey("QuestionarioId");
                });

            modelBuilder.Entity("Crude.Models.Questionario", b =>
                {
                    b.HasOne("Crude.Models.Aluno", null)
                        .WithMany("ListaDeQuestionarios")
                        .HasForeignKey("AlunoId");

                    b.HasOne("Crude.Models.Questionario", "Questionarios")
                        .WithMany()
                        .HasForeignKey("QuestionariosId");
                });

            modelBuilder.Entity("Crude.Models.Resposta", b =>
                {
                    b.HasOne("Crude.Models.Perguntas", null)
                        .WithMany("ListaDeRespostas")
                        .HasForeignKey("PerguntasId");
                });

            modelBuilder.Entity("Crude.Models.Tipos", b =>
                {
                    b.HasOne("Crude.Models.Espacos", "Espaco")
                        .WithMany("ListaDeTipos")
                        .HasForeignKey("EspacoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
